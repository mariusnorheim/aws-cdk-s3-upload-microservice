# use this for multi account deployments along with
# the parameter file in "params" folder
version: "0.2"
env:
  parameter-store:
    MASTER_ACCOUNT: master_account_id
phases:
  build:
    commands:
      # install cdk npm packages
      - npm i
      # find account name for params file
      - CREDS="$(/bin/bash assume.sh $MASTER_ACCOUNT OrganizationAccountAccessRole-readonly)" && eval "$CREDS"
      - ACCOUNT_NAME=$(aws organizations describe-account --account-id $TARGET_ACCOUNT | jq -r '.Account.Name')
      - echo $ACCOUNT_NAME
      - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_PROFILE
      - CREDS="$(/bin/bash assume.sh $TARGET_ACCOUNT)" && eval "$CREDS"
      - export AWS_REGION=$TARGET_REGION
      - echo $AWS_REGION
      - echo $TARGET_REGION
      - aws sts get-caller-identity
      - ACCOUNT_NAME=$(echo $ACCOUNT_NAME | tr -d ' ')
      - PARAMS="$(cat params/${ACCOUNT_NAME}_${AWS_REGION}.json | npx ts-node transform-adf-params.ts)"
      - cp params/${ACCOUNT_NAME}_${AWS_REGION}.json params.json
      - echo $(cat params.json)
      # build lambdas
      - cd ${CODEBUILD_SRC_DIR}/lambdas/s3-upload
      - go mod init lambdas/s3-upload
      - go mod download
      - GOOS=linux GOARCH=amd64 go build -o bootstrap
      - cd ${CODEBUILD_SRC_DIR}/lambdas/slack-notification
      - go mod init lambdas/slack-notification
      - go mod download
      - GOOS=linux GOARCH=amd64 go build -o bootstrap
      # cdk deploy
      - cd ${CODEBUILD_SRC_DIR}
      - npm run cdk -- bootstrap aws://$TARGET_ACCOUNT/$AWS_REGION --qualifier cdktwo --toolkit-stack-name CDKTwoToolkit --force
      - npm run cdk -- deploy "*" --require-approval never
